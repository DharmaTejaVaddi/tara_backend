"""
Django's settings for Tara project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv
import base64

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+9)9852a8&af5dmne4@fgjxcn8q7)65losj40_3&hy^d1+x2ku'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')

ALLOWED_HOSTS = ['*']


# Define base directory and log path
LOG_PATH = os.path.join(BASE_DIR, 'log')

# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'user_management',
    'drf_yasg',
    'rest_framework_simplejwt'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'Tara.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',  # Ensure this directory exists and is listed
        ],
        'APP_DIRS': True,  # This allows Django to look for templates in each app's "templates" directory
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'Tara.wsgi.application'
ASGI_APPLICATION = 'Tara.asgi.application'

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# In Tara/settings/default.py
AUTH_USER_MODEL = 'user_management.User'


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'

# Directory where static files will be collected
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Tara/settings/default.py

# Disable migrations for certain built-in apps
MIGRATION_MODULES = {
    'auth': None,
    'admin': None,
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'mekalasaikiran05041996@gmail.com'
EMAIL_HOST_PASSWORD = 'ofwl xutg hsfa leww'

FRONTEND_URL = 'http://localhost:3000'


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]


# Set the log level based on the environment
ENVIRONMENT = os.getenv('DJANGO_ENV', 'local')  # Default to 'local' if DJANGO_ENV is not set
LOG_LEVEL = 'DEBUG' if ENVIRONMENT in ['local', 'development'] else 'ERROR'


# Define log directory
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
LOG_DIR = os.path.join(BASE_DIR, 'logs')

# Ensure the 'logs' directory exists
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'log_format': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        },
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[%(server_time)s] %(message)s',
        },
    },
    'handlers': {
        # Handler for general application logs (logs rotation at midnight)
        'daily_file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'application.log'),
            'when': 'midnight',
            'interval': 1,
            'backupCount': 7,
            'formatter': 'log_format',
        },
        # Console handler for general logs
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'log_format',
        },
        # Console handler for error logs
        'error_console': {
            'class': 'logging.StreamHandler',
            'formatter': 'log_format',
        },
        # Django server handler for server-related logs
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
    },
    'loggers': {
        # General logger (django logger)
        'django': {
            'handlers': ['console', 'daily_file'],
            'level': 'INFO',
            'propagate': True,
        },
        # Error-specific logger
        'error_logger': {
            'handlers': ['error_console', 'daily_file'],
            'level': 'ERROR',  # Error logs specifically handled here
            'propagate': False,
        },
        # Server-related logs
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': True,
        },
        # Optional: Autoreload related logs
        'django.utils.autoreload': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}


################ master gst

MASTER_GST_EMAIL = os.getenv('MASTER_GST_EMAIL')
MASTER_GST_CLIENT_ID = os.getenv('MASTER_GST_CLIENT_ID')
MASTER_GST_SECRET_KEY = os.getenv('MASTER_GST_SECRET_KEY')

############# Zerobounce email validation
ZEROBOUNCE_EMAIL = os.getenv('ZEROBOUNCE_EMAIL')
ZEROBOUNCE_SECRET_KEY = os.getenv('ZEROBOUNCE_SECRET_KEY')

################


RAZORPAY_CLIENT_ID = os.getenv('RAZORPAY_CLIENT_ID')

RAZORPAY_CLIENT_SECRET = os.getenv('RAZORPAY_CLIENT_SECRET')

SANDBOX_API_KEY = os.getenv('SANDBOX_API_KEY')
SANDBOX_API_SECRET = os.getenv('SANDBOX_API_SECRET')
SANDBOX_API_URL = os.getenv('SANDBOX_API_URL')
SANDBOX_API_VERSION = os.getenv('SANDBOX_API_VERSION')


# Load the secret encryption key
SECRET_ENCRYPTION_KEY = os.getenv("SECRET_ENCRYPTION_KEY", "default-fallback-key")
